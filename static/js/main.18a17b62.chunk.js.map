{"version":3,"sources":["spiral.png","logo.svg","Recorder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recorder","MicRecorder","require","FileSaver","recorder","bitRate","id","onClick","document","querySelector","classList","add","start","then","catch","e","console","error","remove","stop","getMp3","buffer","blob","file","File","type","lastModified","Date","now","saveAs","App","className","src","spiral","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,oC,wECA3CD,EAAOC,QAAU,IAA0B,kC,oJC+C5BC,MA1Cf,WAEI,IAAMC,EAAcC,EAAQ,IACtBC,EAAYD,EAAQ,GAEpBE,EAAW,IAAIH,EAAY,CAC7BI,QAAS,MA2Bb,OAEE,6BACE,4BAAQC,GAAK,MAAOC,QA1BxB,WAEEC,SAASC,cAAc,QAAQC,UAAUC,IAAI,YAC7CP,EAASQ,QAAQC,MAAK,eACnBC,OAAM,SAACC,GACRC,QAAQC,MAAMF,QAqBd,SACA,4BAAQT,GAAK,OAAOC,QAjBxB,WACEC,SAASC,cAAc,QAAQC,UAAUQ,OAAO,YAChDd,EACCe,OACAC,SAASP,MAAK,YAAqB,IAAD,mBAAlBQ,EAAkB,KAAVC,EAAU,KAC7BC,EAAO,IAAIC,KAAKH,EAAQ,sBAAuB,CACjDI,KAAMH,EAAKG,KACXC,aAAcC,KAAKC,QAErBzB,EAAU0B,OAAON,QAQ2B,sC,gBCjBrCO,MAnBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAQF,UAAU,WAAWG,IAAI,SAC3C,yDACA,0FAKA,6BACA,kBAAC,EAAD,SCNFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT7B,MAAK,SAAAkC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BrC,QAAQsC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlB/B,QAAQsC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BjC,OAAM,SAAAG,GACLD,QAAQC,MAAM,4CAA6CA,MC1FjEwC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnD,SAASoD,eAAe,SDYnB,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,kBAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,kBAAN,sBAEP3B,IAgEV,SAAiCO,EAAOC,GAEtCuB,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BtD,MAAK,SAAAuD,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM5D,MAAK,SAAAkC,GACjCA,EAAa2B,aAAa7D,MAAK,WAC7BwB,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1B7B,OAAM,WACLE,QAAQsC,IACN,oEAvFAsB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM5D,MAAK,WACjCG,QAAQsC,IACN,iHAMJb,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.18a17b62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spiral.65541a20.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport { saveAs } from 'file-saver';\r\nimport { Button } from 'react-bootstrap';\r\nimport flashing from './flashing.css'\r\n\r\nfunction Recorder() {\r\n    \r\n    const MicRecorder = require('mic-recorder-to-mp3');\r\n    const FileSaver = require('file-saver');\r\n\r\n    const recorder = new MicRecorder({\r\n        bitRate: 128\r\n    });    \r\n\r\n    // start recording function\r\n    function record_start() {\r\n      // toggle colour flashing\r\n      document.querySelector('#rec').classList.add(\"flashing\");\r\n      recorder.start().then(() => {\r\n      }).catch((e) => {\r\n        console.error(e);\r\n      });\r\n    }\r\n\r\n    // stop recording function then save to client device\r\n    function record_stop () {\r\n      document.querySelector('#rec').classList.remove(\"flashing\");\r\n      recorder\r\n      .stop()\r\n      .getMp3().then(([buffer, blob]) => {\r\n        var file = new File(buffer, 'voice-recording.mp3', {\r\n          type: blob.type,\r\n          lastModified: Date.now()\r\n        });\r\n        FileSaver.saveAs(file)       \r\n      },\r\n    )}\r\n\r\n    return (\r\n  \r\n      <div>\r\n        <button id = \"rec\"  onClick = {record_start}>Start</button>\r\n        <button id = \"stop\" onClick = {record_stop}><p>Stop</p></button>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Recorder;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Recorder from './Recorder.js';\r\nimport spiral from  './spiral.png';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={spiral} className=\"App-logo\" alt=\"logo\" />\r\n        <h1> Indigital Voice Recorder</h1>\r\n        <p>\r\n          Press the start button when you're ready to start recording\r\n        </p>\r\n\r\n\r\n        <br></br>\r\n        <Recorder></Recorder>\r\n\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}