{"version":3,"sources":["spiral.png","Recorder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recorder","MicRecorder","require","FileSaver","recorder","bitRate","id","onClick","document","querySelector","classList","add","start","then","catch","e","console","error","remove","stop","getMp3","buffer","blob","file","File","type","lastModified","Date","now","saveAs","App","className","src","spiral","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,oC,sMCqD5BC,MA/Cf,WACE,IAAMC,EAAcC,EAAQ,IACtBC,EAAYD,EAAQ,GAEpBE,EAAW,IAAIH,EAAY,CAC/BI,QAAS,MA8BX,OACE,6BACE,4BAAQC,GAAG,MAAMC,QA5BrB,WAEEC,SAASC,cAAc,QAAQC,UAAUC,IAAI,YAC7CP,EACGQ,QACAC,MAAK,eACLC,OAAM,SAACC,GACNC,QAAQC,MAAMF,QAqBhB,SAGA,4BAAQT,GAAG,OAAOC,QAnBtB,WACEC,SAASC,cAAc,QAAQC,UAAUQ,OAAO,YAChDd,EACGe,OACAC,SACAP,MAAK,YAAqB,IAAD,mBAAlBQ,EAAkB,KAAVC,EAAU,KACpBC,EAAO,IAAIC,KAAKH,EAAQ,sBAAuB,CACjDI,KAAMH,EAAKG,KACXC,aAAcC,KAAKC,QAErBzB,EAAU0B,OAAON,QAUjB,sC,gBC3BOO,MAff,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAQF,UAAU,WAAWG,IAAI,SAC3C,yDACA,0FAEA,6BACA,kBAAC,EAAD,SCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASmC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMgC,c","file":"static/js/main.d680c43e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spiral.65541a20.png\";","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport { saveAs } from 'file-saver';\nimport { Button } from 'react-bootstrap';\nimport flashing from './flashing.css';\n\nfunction Recorder() {\n  const MicRecorder = require('mic-recorder-to-mp3');\n  const FileSaver = require('file-saver');\n\n  const recorder = new MicRecorder({\n    bitRate: 128,\n  });\n\n  // start recording function\n  function record_start() {\n    // toggle colour flashing\n    document.querySelector('#rec').classList.add('flashing');\n    recorder\n      .start()\n      .then(() => {})\n      .catch((e) => {\n        console.error(e);\n      });\n  }\n\n  // stop recording function then save to client device\n  function record_stop() {\n    document.querySelector('#rec').classList.remove('flashing');\n    recorder\n      .stop()\n      .getMp3()\n      .then(([buffer, blob]) => {\n        var file = new File(buffer, 'voice-recording.mp3', {\n          type: blob.type,\n          lastModified: Date.now(),\n        });\n        FileSaver.saveAs(file);\n      });\n  }\n\n  return (\n    <div>\n      <button id='rec' onClick={record_start}>\n        Start\n      </button>\n      <button id='stop' onClick={record_stop}>\n        <p>Stop</p>\n      </button>\n    </div>\n  );\n}\n\nexport default Recorder;\n","import React from 'react';\nimport './App.css';\nimport Recorder from './Recorder.js';\nimport spiral from './spiral.png';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <img src={spiral} className='App-logo' alt='logo' />\n        <h1> Indigital Voice Recorder</h1>\n        <p>Press the start button when you're ready to start recording</p>\n\n        <br></br>\n        <Recorder></Recorder>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}