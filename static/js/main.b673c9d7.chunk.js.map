{"version":3,"sources":["spiral.png","logo.svg","Recorder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recorder","MicRecorder","require","FileSaver","recorder","bitRate","style","height","width","backgroundColor","borderRadius","marginRight","color","onClick","start","then","catch","e","console","error","stop","getMp3","buffer","blob","file","File","type","lastModified","Date","now","saveAs","App","className","src","spiral","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,oC,wECA3CD,EAAOC,QAAU,IAA0B,kC,4HCqE5BC,MAlEf,WAGI,IAgBMC,EAAcC,EAAQ,IACtBC,EAAYD,EAAQ,GAEpBE,EAAW,IAAIH,EAAY,CAC7BI,QAAS,MA4Bb,OAEE,6BAGE,4BAAQC,MA9CO,CACjBC,OAAQ,OACRC,MAAO,OACPC,gBAAiB,MACjBC,aAAc,MACdC,YAAY,MACZC,MAAM,SAwCyBC,QA7BjC,WAEET,EAASU,QAAQC,MAAK,eAEnBC,OAAM,SAACC,GACRC,QAAQC,MAAMF,QAwBd,SAEA,4BAAQX,MAvDM,CAChBM,MAAO,QACPL,OAAQ,OACRC,MAAO,QAoDuBK,QAtBhC,WACET,EACCgB,OACAC,SAASN,MAAK,YAAqB,IAAD,mBAAlBO,EAAkB,KAAVC,EAAU,KAG7BC,EAAO,IAAIC,KAAKH,EAAQ,sBAAuB,CACjDI,KAAMH,EAAKG,KACXC,aAAcC,KAAKC,QAErB1B,EAAU2B,OAAON,QAYjB,U,gBCpCOO,MAnBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAQF,UAAU,WAAWG,IAAI,SAC3C,yDACA,iFAKA,6BACA,kBAAC,EAAD,SCNYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMgC,c","file":"static/js/main.b673c9d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spiral.65541a20.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { saveAs } from 'file-saver';\r\n\r\nfunction Recorder() {\r\n    \r\n    // style for stop button\r\n    const stopStyle = {\r\n      color: \"black\",\r\n      height: \"45px\",\r\n      width: \"45px\",\r\n    }\r\n\r\n    // style for start button\r\n    const startStyle = {\r\n      height: \"50px\",\r\n      width: \"50px\",\r\n      backgroundColor: \"red\",\r\n      borderRadius: \"50%\",\r\n      marginRight:\"2em\",\r\n      color:\"white\"\r\n    }\r\n\r\n    const MicRecorder = require('mic-recorder-to-mp3');\r\n    const FileSaver = require('file-saver');\r\n    // New instance\r\n    const recorder = new MicRecorder({\r\n        bitRate: 128\r\n    });    \r\n\r\n    // add function to show that recording is in progress, toggle off when stop is pressed\r\n    function record_start() {\r\n      // start recording\r\n      recorder.start().then(() => {\r\n        // something else\r\n      }).catch((e) => {\r\n        console.error(e);\r\n      });\r\n    }\r\n\r\n    function record_stop () {\r\n      recorder\r\n      .stop()\r\n      .getMp3().then(([buffer, blob]) => {\r\n        // do what ever you want with buffer and blob\r\n        // Example: Create a mp3 file and play\r\n        var file = new File(buffer, 'voice-recording.mp3', {\r\n          type: blob.type,\r\n          lastModified: Date.now()\r\n        });\r\n        FileSaver.saveAs(file)       \r\n      },\r\n    )}\r\n\r\n\r\n    return (\r\n  \r\n      <div>\r\n\r\n\r\n        <button style = {startStyle} onClick = {record_start}>Start</button>\r\n      \r\n        <button style = {stopStyle} onClick = {record_stop}>Stop</button>\r\n\r\n        {/* <button style = {stopStyle} onClick = {Play}>Play</button> */}\r\n \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recorder;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Recorder from './Recorder.js';\nimport spiral from  './spiral.png';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={spiral} className=\"App-logo\" alt=\"logo\" />\n        <h1> Indigital Voice Recorder</h1>\n        <p>\n          Press the record button when you're ready to start\n        </p>\n\n\n        <br></br>\n        <Recorder></Recorder>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}